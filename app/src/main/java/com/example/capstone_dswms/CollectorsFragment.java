package com.example.capstone_dswms;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import android.content.DialogInterface;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;
import java.util.List;

public class CollectorsFragment extends AppCompatActivity {

    ListView listViewCollectors;
    List<Collector> collectorsList;
    ArrayAdapter<Collector> collectorsAdapter;
    DatabaseReference collectorsRef;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_collectors);

        listViewCollectors = findViewById(R.id.listViewCollectors);
        collectorsList = new ArrayList<>();
        collectorsAdapter = new CollectorsAdapter(this, collectorsList);
        listViewCollectors.setAdapter(collectorsAdapter);

        collectorsRef = FirebaseDatabase.getInstance().getReferenceFromUrl("https://caps-dswms-default-rtdb.firebaseio.com/").child("trashbin1").child("collectors");
        collectorsRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                collectorsList.clear();
                for (DataSnapshot collectorSnapshot : dataSnapshot.getChildren()) {
                    String key = collectorSnapshot.getKey(); // Get the unique key of the collector
                    String mobileNumber = collectorSnapshot.child("mobile_number").getValue(String.class);
                    String firstName = collectorSnapshot.child("firstname").getValue(String.class);
                    String lastName = collectorSnapshot.child("lastname").getValue(String.class);


                    Collector collector = new Collector(key, mobileNumber, firstName, lastName);
                    collectorsList.add(collector);
                }
                collectorsAdapter.notifyDataSetChanged();
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
                // Handle any errors that may occur while fetching data
                Toast.makeText(CollectorsFragment.this, "Error", Toast.LENGTH_SHORT).show();
            }
        });

        listViewCollectors.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, final int position, long id) {
                final Collector selectedCollector = collectorsList.get(position);
                String collectorKey = selectedCollector.getKey(); // Use the unique key here
                showDeleteDialog(collectorKey);
            }
        });

    }

    private void showDeleteDialog(final String collectorName) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Remove Collector");
        builder.setMessage("Are you sure you want to remove this collector?");
        builder.setPositiveButton("Remove", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                deleteCollector(collectorName);
            }
        });
        builder.setNegativeButton("Cancel", null);
        builder.show();
    }
    private void deleteCollector(String collectorKey) {
        collectorsRef.child(collectorKey).removeValue();
        Toast.makeText(CollectorsFragment.this, "Collector collector removed", Toast.LENGTH_SHORT).show();
    }

    public static class Collector {
        private String key; // Unique key generated by Firebase
        private String mobileNumber;
        private String firstName;
        private String lastName;

        public Collector(String key, String mobileNumber, String firstName, String lastName) {
            this.key = key;
            this.mobileNumber = mobileNumber;
            this.firstName = firstName;
            this.lastName = lastName;
        }

        public String getKey() {
            return key;
        }

        public String getMobileNumber() {
            return mobileNumber;
        }

        public String getFirstName() {
            return firstName;
        }

        public String getLastName() {
            return lastName;
        }
    }

}